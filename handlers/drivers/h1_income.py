from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from keyboards.reply import reply_income_menu, reply_back_button
from keyboards.reply import reply_drive_menu
from services.google_sheets import add_record


router = Router()

class IncomeStates(StatesGroup):
    """FSM –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞"""
    choosing_type = State()
    waiting_amount = State()
    waiting_comment = State()


@router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥ üí∞")
async def start_income(message: Message, state: FSMContext):
    """–ú–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞"""
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è —Ç–∏–ø–∞ –¥–æ—Ö–æ–¥–∞üîΩ",
        reply_markup=reply_income_menu()
    )
    await state.set_state(IncomeStates.choosing_type)


@router.message(IncomeStates.choosing_type, F.text.in_(["–û–ø–ª–∞—Ç–∞ –∑–∞ –∑–∞–∫–∞–∑", "–î–æ–ø–ª–∞—Ç–∞ –ø–æ –∑–∞–∫–∞–∑—É"]))
async def ask_income_amount(message: Message, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å —Å—É–º–º—ã –¥–æ—Ö–æ–¥–∞"""
    await state.update_data(income_type=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–∏—Å–ª–æ–º: –ù–∞–ø—Ä–∏–º–µ—Ä (20.00)", reply_markup=reply_back_button())
    await state.set_state(IncomeStates.waiting_amount)


@router.message(IncomeStates.waiting_amount)
async def ask_income_comment(message: Message, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    if message.text == "–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è":
        await state.set_state(IncomeStates.choosing_type)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ—Ö–æ–¥–∞:", reply_markup=reply_income_menu())
        return

    try:
        amount = float(message.text.replace(",", "."))
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è'.")
        return

    await state.update_data(amount=amount)
    await message.answer("–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ì–æ–≥–æ–ª—è 17)", reply_markup=reply_back_button())
    await state.set_state(IncomeStates.waiting_comment)


@router.message(IncomeStates.waiting_comment)
async def confirm_income(message: Message, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞"""
    user_data = await state.get_data()

    income_type = user_data['income_type']
    amount = user_data['amount']
    comment = message.text

    subcategory = "–æ–ø–ª–∞—Ç–∞" if income_type == "–û–ø–ª–∞—Ç–∞ –∑–∞ –∑–∞–∫–∞–∑" else "–¥–æ–ø–ª–∞—Ç–∞"

    add_record(
        user_id=message.from_user.id,
        username=message.from_user.full_name,
        record_type='–¥–æ—Ö–æ–¥',
        subcategory=subcategory,
        amount=amount,
        comment=comment
    )

    await message.answer(
        f"‚úÖ –î–æ—Ö–æ–¥ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:\n"
        f"–¢–∏–ø: {income_type}\n"
        f"–°—É–º–º–∞: {amount:.2f} –±–µ–ª. —Ä—É–±.\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}",
        reply_markup=reply_drive_menu()
    )
    await state.clear()

@router.message(F.text == "–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è")
async def back_button(message: Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –¥–æ—Ö–æ–¥–∞"""
    await state.clear()
    await message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é", reply_markup=reply_income_menu())


@router.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def back_to_main_menu(message: Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    await message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=reply_drive_menu())