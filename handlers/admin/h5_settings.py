from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import StateFilter

from utils.auth import is_admin, is_main_admin, add_admin, remove_admin
from keyboards.reply import reply_admin_menu, reply_settings_menu

router = Router()


class SettingsStates(StatesGroup):
    adding_admin = State()
    removing_admin = State()


BACK_BTN = "üîö –ù–∞–∑–∞–¥"


@router.message(F.text == "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def admin_settings_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    await state.clear()
    await message.answer(
        "‚öô –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:",
        reply_markup=reply_settings_menu()
    )


@router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
async def add_admin_start(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if not is_main_admin(user_id):
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∞–¥–º–∏–Ω–æ–≤.")
        return

    await state.set_state(SettingsStates.adding_admin)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ Telegram ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")


@router.message(StateFilter(SettingsStates.adding_admin))
async def add_admin_save(message: Message, state: FSMContext):
    if message.text == BACK_BTN:
        await state.clear()
        await message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫", reply_markup=reply_settings_menu())
        return

    new_admin_id = int(message.text.strip())
    if add_admin(new_admin_id):
        await message.answer(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å ID {new_admin_id} –¥–æ–±–∞–≤–ª–µ–Ω", reply_markup=reply_settings_menu())
    else:
        await message.answer(f"‚ö† –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å ID {new_admin_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", reply_markup=reply_settings_menu())
    await state.clear()


@router.message(F.text == "–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
async def remove_admin_start(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if not is_main_admin(user_id):
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –∞–¥–º–∏–Ω–æ–≤.")
        return

    await state.set_state(SettingsStates.removing_admin)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ Telegram ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")


@router.message(StateFilter(SettingsStates.removing_admin))
async def remove_admin_save(message: Message, state: FSMContext):
    if message.text == BACK_BTN:
        await state.clear()
        await message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫", reply_markup=reply_settings_menu())
        return

    remove_admin_id = int(message.text.strip())
    if remove_admin(remove_admin_id):
        await message.answer(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å ID {remove_admin_id} —É–¥–∞–ª–µ–Ω", reply_markup=reply_settings_menu())
    else:
        await message.answer(f"‚ö† –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
                             reply_markup=reply_settings_menu())
    await state.clear()


@router.message(F.text == BACK_BTN)
async def back_to_admin_menu(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –∞–¥–º–∏–Ω-–º–µ–Ω—é", reply_markup=reply_admin_menu())
